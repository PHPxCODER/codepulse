// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  sessions_member SessionMember[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                      String  @id @default(cuid())
  userId                  String
  type                    String
  provider                String
  providerAccountId       String
  refresh_token           String? @db.Text
  access_token            String? @db.Text
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token                String? @db.Text
  session_state           String?
  refresh_token_expires_in Int?   // Add this line

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  files       File[]
  sessions    CodeSession[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id        String   @id @default(cuid())
  name      String
  path      String
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, path])
}

model CodeSession {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  recording   Json?
  members     SessionMember[]
  createdAt   DateTime @default(now())
  endedAt     DateTime?
  isCourse    Boolean  @default(false)
  courseNotes String?  @db.Text
}

model SessionMember {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String
  session   CodeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role      String      @default("participant") // "host", "participant", "viewer"
  joinedAt  DateTime    @default(now())
  leftAt    DateTime?

  @@unique([userId, sessionId])
}